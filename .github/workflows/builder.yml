name: Builder

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  build-macos:
    runs-on: macos-latest

    env:
      NCNN_VERSION: 20210322
      CPU_PKG_NAME: ncnn-20210322-macos
      GPU_PKG_NAME: ncnn-20210322-macos-vulkan

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 获取所有的git log和tag
      - name: Unshallow
        run: git fetch --prune --unshallow

      # 下载并解压ncnn
      #- name: download ncnn source
      #  run: |
      #    wget -q https://github.com/Tencent/ncnn/archive/${{ env.NCNN_VERSION }}.zip -O ncnn-${{ env.NCNN_VERSION }}.zip
      #    unzip -q ncnn-${{ env.NCNN_VERSION }}.zip

      # 检出ncnn
      - name: checkout ncnn
        uses: actions/checkout@v2
        with:
          repository: Tencent/ncnn
          path: ncnn-${{ env.NCNN_VERSION }}
          ref: ${{ env.NCNN_VERSION }}
          submodules: recursive

      # 安装openmp
      - name: install openmp
        run: |
          brew install libomp

      # 安装vulkan
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.162.0/mac/vulkansdk-macos-1.2.162.0.dmg?Human=true -O vulkansdk-macos-1.2.162.0.dmg
          hdiutil attach vulkansdk-macos-1.2.162.0.dmg
          cp -r /Volumes/vulkansdk-macos-1.2.162.0 .
          rm -rf vulkansdk-macos-1.2.162.0/Applications
          find vulkansdk-macos-1.2.162.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
          hdiutil detach /Volumes/vulkansdk-macos-1.2.162.0

      # 缓存vulkan
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: vulkansdk-macos-1.2.162.0
          key: vulkansdk-macos-1.2.162.0

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-ncnn-mac-cpu.sh ncnn-${{ env.NCNN_VERSION }}
          cp build-ncnn-mac-gpu.sh ncnn-${{ env.NCNN_VERSION }}

      # 编译ncnn cpu for macos
      - name: build ncnn
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-mac-cpu.sh &&./build-ncnn-mac-cpu.sh

      # install文件夹改名macos，并使用7z压缩
      - name: 7zip
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}/build-mac-Release-CPU
          mv install macos
          7z a ${{ env.CPU_PKG_NAME }}.7z macos

      # 编译ncnn gpu for macos
      - name: build ncnn
        run: |
          export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.162.0/macOS
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-mac-gpu.sh &&./build-ncnn-mac-gpu.sh

      # install文件夹改名macos，并使用7z压缩
      - name: 7zip
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}/build-mac-Release-GPU
          mv install macos
          7z a ${{ env.GPU_PKG_NAME }}.7z macos

      # 获取git log 从 previousTag 到 lastTag
      - name: Get git log
        id: git-log
        run: |
          previousTag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
          lastTag=$(git describe --abbrev=0 --tags)
          echo "previousTag:$previousTag ~ lastTag:$lastTag"
          log=$(git log $previousTag..$lastTag --pretty=format:'- %cd %an: %s\n' --date=format:'%Y-%m-%d %H:%M:%S')
          echo "$log"
          echo "::set-output name=log::"$log""

      # 获取指定时区的时间
      # https://github.com/marketplace/actions/get-time-action
      - name: Get Time
        id: time
        uses: JantHsueh/get-time-action@master
        with:
          timeZone: 8

      # 显示信息
      - name: Show info
        if: always()
        run: |
          echo '${{ steps.git-log.outputs.log }}'

      # 向钉钉发送消息
      # https://github.com/marketplace/actions/web-request-action
      - name: dingtalk
        uses: satak/webrequest-action@master
        with:
          url: ${{ secrets.DINGTALK_WEBHOOK }}
          method: POST
          payload: '{"msgtype": "text", "text": {"content": "版本更新: ${{ github.repository }}-版本号: ${{ github.ref }} \n 编译时间： ${{ steps.time.outputs.time }} \n 距上个正式版的更新记录: \n${{ steps.git-log.outputs.log }}"}}'
          headers: '{"Content-Type": "application/json"}'

      # 创建Changelog文件 triggered by git tag push
      - name: Generate Changelog
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo -e '${{ steps.git-log.outputs.log }}' > Release.txt

      # Cat Changelog triggered by git tag push
      - name: Cat Changelog
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat Release.txt

      # 创建Release triggered by git tag push
      # https://github.com/marketplace/actions/gh-release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: Release.txt
          draft: true
          files: |
            ncnn-${{ env.NCNN_VERSION }}/build-mac-Release-CPU/${{ env.CPU_PKG_NAME }}.7z
            ncnn-${{ env.NCNN_VERSION }}/build-mac-Release-GPU/${{ env.GPU_PKG_NAME }}.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}