name: Builder

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  ubuntu1804:
    runs-on: ubuntu-18.04

    env:
      NCNN_VERSION: 20220729
      CPU_PKG_NAME: ncnn-20220729-ubuntu1804
      GPU_PKG_NAME: ncnn-20220729-ubuntu1804-vulkan

    steps:
      # 检出代码
      - uses: actions/checkout@v3

      # 检出ncnn
      - name: checkout ncnn
        uses: actions/checkout@v3
        with:
          repository: Tencent/ncnn
          path: ncnn-${{ env.NCNN_VERSION }}
          ref: ${{ env.NCNN_VERSION }}
          submodules: recursive

      # 安装vulkan
      - name: vulkansdk
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.189.0/linux/vulkansdk-linux-x86_64-1.2.189.0.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.2.189.0.tar.gz
          tar -xf vulkansdk-linux-x86_64-1.2.189.0.tar.gz
          rm -rf 1.2.189.0/source 1.2.189.0/samples
          find 1.2.189.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-ncnn-cpu.sh ncnn-${{ env.NCNN_VERSION }}
          cp build-ncnn-gpu.sh ncnn-${{ env.NCNN_VERSION }}
          cp ncnn_cmake_options.txt ncnn-${{ env.NCNN_VERSION }}

      # 编译ncnn cpu
      - name: build cpu
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-cpu.sh &&./build-ncnn-cpu.sh

      # install文件夹改名linux，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-Release-CPU/install linux
          7z a ${{ env.CPU_PKG_NAME }}.7z linux
          rm -r -f linux

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CPU_PKG_NAME }}
          path: ${{ env.CPU_PKG_NAME }}.7z

      # 编译ncnn gpu
      - name: build gpu
        run: |
          export VULKAN_SDK=`pwd`/1.2.189.0/x86_64
          export PATH=`pwd`/1.2.189.0/x86_64/bin:$PATH
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-gpu.sh &&./build-ncnn-gpu.sh

      # install文件夹改名linux，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-Release-GPU/install linux
          7z a ${{ env.GPU_PKG_NAME }}.7z linux
          rm -r -f linux

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GPU_PKG_NAME }}
          path: ${{ env.GPU_PKG_NAME }}.7z

  macos1015:
    runs-on: macos-latest

    env:
      NCNN_VERSION: 20220729
      CPU_PKG_NAME: ncnn-20220729-macos1015
      GPU_PKG_NAME: ncnn-20220729-macos1015-vulkan

    steps:
      # 检出代码
      - uses: actions/checkout@v3

      # 检出ncnn
      - name: checkout ncnn
        uses: actions/checkout@v3
        with:
          repository: Tencent/ncnn
          path: ncnn-${{ env.NCNN_VERSION }}
          ref: ${{ env.NCNN_VERSION }}
          submodules: recursive

      # 安装openmp
      - name: install openmp
        run: |
          brew install libomp

      # 安装vulkan
      - name: vulkansdk
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.189.0/mac/vulkansdk-macos-1.2.189.0.dmg?Human=true -O vulkansdk-macos-1.2.189.0.dmg
          hdiutil attach vulkansdk-macos-1.2.189.0.dmg
          sudo /Volumes/vulkansdk-macos-1.2.189.0/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $GITHUB_WORKSPACE/vulkansdk-macos-1.2.189.0 --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/vulkansdk-macos-1.2.189.0

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-ncnn-cpu.sh ncnn-${{ env.NCNN_VERSION }}
          cp build-ncnn-gpu.sh ncnn-${{ env.NCNN_VERSION }}
          cp ncnn_cmake_options.txt ncnn-${{ env.NCNN_VERSION }}

      # 编译ncnn cpu
      - name: build cpu
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-cpu.sh &&./build-ncnn-cpu.sh

      # install文件夹改名linux，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-Release-CPU/install macos
          7z a ${{ env.CPU_PKG_NAME }}.7z macos
          rm -r -f macos

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CPU_PKG_NAME }}
          path: ${{ env.CPU_PKG_NAME }}.7z

      # 编译ncnn gpu
      - name: build gpu
        run: |
          export VULKAN_SDK=$GITHUB_WORKSPACE/vulkansdk-macos-1.2.189.0/macOS
          cd ncnn-${{ env.NCNN_VERSION }}
          chmod a+x build-ncnn-gpu.sh &&./build-ncnn-gpu.sh

      # install文件夹改名linux，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-Release-GPU/install macos
          7z a ${{ env.GPU_PKG_NAME }}.7z macos
          rm -r -f macos

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GPU_PKG_NAME }}
          path: ${{ env.GPU_PKG_NAME }}.7z

  windows-vs2019:
    runs-on: windows-2019

    env:
      NCNN_VERSION: 20220729
      CPU_PKG_NAME: ncnn-20220729-windows-vs2019
      GPU_PKG_NAME: ncnn-20220729-windows-vs2019-vulkan

    steps:
      # 检出代码
      - uses: actions/checkout@v3

      # 检出ncnn
      - name: checkout ncnn
        uses: actions/checkout@v3
        with:
          repository: Tencent/ncnn
          path: ncnn-${{ env.NCNN_VERSION }}
          ref: ${{ env.NCNN_VERSION }}
          submodules: recursive

      # 安装vulkan
      - name: vulkansdk
        run: |
          Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.2.189.0/windows/VulkanSDK-1.2.189.0-Installer.exe?Human=true -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          $installer.WaitForExit();

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-ncnn-cpu-vs2019.bat ncnn-${{ env.NCNN_VERSION }}
          cp build-ncnn-gpu-vs2019.bat ncnn-${{ env.NCNN_VERSION }}
          cp ncnn_cmake_options.txt ncnn-${{ env.NCNN_VERSION }}

      # 编译ncnn cpu
      - name: build cpu
        run: |
          cd ncnn-${{ env.NCNN_VERSION }}
          ./build-ncnn-cpu-vs2019.bat

      # install文件夹改名，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-x64-md-cpu/install windows-x64
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-Win32-md-cpu/install windows-x86
          7z a ${{ env.CPU_PKG_NAME }}-md.7z windows-x64 windows-x86
          rm -r -Force windows-x64
          rm -r -Force windows-x86
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-x64-mt-cpu/install windows-x64
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-Win32-mt-cpu/install windows-x86
          7z a ${{ env.CPU_PKG_NAME }}-mt.7z windows-x64 windows-x86
          rm -r -Force windows-x64
          rm -r -Force windows-x86

      # 上传artifact md
      - name: upload-md
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CPU_PKG_NAME }}-md
          path: ${{ env.CPU_PKG_NAME }}-md.7z

      # 上传artifact mt
      - name: upload-mt
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CPU_PKG_NAME }}-mt
          path: ${{ env.CPU_PKG_NAME }}-mt.7z

      # 编译ncnn gpu
      - name: build gpu
        run: |
          $env:VULKAN_SDK="C:/VulkanSDK/1.2.189.0"
          $env:Path+=";C:/VulkanSDK/1.2.189.0/Bin"
          cd ncnn-${{ env.NCNN_VERSION }}
          ./build-ncnn-gpu-vs2019.bat

      # install文件夹改名，并使用7z压缩
      - name: 7zip
        run: |
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-x64-md-gpu/install windows-x64
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-Win32-md-gpu/install windows-x86
          7z a ${{ env.GPU_PKG_NAME }}-md.7z windows-x64 windows-x86
          rm -r -Force windows-x64
          rm -r -Force windows-x86
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-x64-mt-gpu/install windows-x64
          mv ncnn-${{ env.NCNN_VERSION }}/build-v142-Win32-mt-gpu/install windows-x86
          7z a ${{ env.GPU_PKG_NAME }}-mt.7z windows-x64 windows-x86
          rm -r -Force windows-x64
          rm -r -Force windows-x86

      # 上传artifact
      - name: upload-md
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GPU_PKG_NAME }}-md
          path: ${{ env.GPU_PKG_NAME }}-md.7z

      # 上传artifact
      - name: upload-mt
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GPU_PKG_NAME }}-mt
          path: ${{ env.GPU_PKG_NAME }}-mt.7z

  release:
    needs: [ ubuntu1804, macos1015, windows-vs2019 ]

    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - uses: actions/checkout@v3

      # 获取所有的git log和tag
      - name: Unshallow
        run: git fetch --prune --unshallow

      # 获取git log 从 previousTag 到 lastTag
      - name: Get git log
        id: git-log
        run: |
          previousTag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
          lastTag=$(git describe --abbrev=0 --tags)
          echo "previousTag:$previousTag ~ lastTag:$lastTag"
          log=$(git log $previousTag..$lastTag --pretty=format:'- %cd %an: %s\n' --date=format:'%Y-%m-%d %H:%M:%S')
          echo "$log"
          echo "log_state="$log"" >> $GITHUB_ENV

      # 创建Changelog文件 triggered by git tag push
      - name: Generate Changelog
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo -e '${{ env.log_state }}' > Release.txt

      # Cat Changelog triggered by git tag push
      - name: Cat Changelog
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat Release.txt

      # 下载artifact
      - name: download
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # 查看artifact
      - name: list artifact
        run: |
          tree artifacts

      # 创建release
      - name: create-release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: Release.txt
          draft: false
          prerelease: false

      - name: upload-ubuntu1804-cpu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-ubuntu1804
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-ubuntu1804-gpu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-ubuntu1804-vulkan
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-macos1015-cpu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-macos1015
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-macos1015-gpu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-macos1015-vulkan
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2019-cpu-md
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-windows-vs2019-md
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2019-gpu-md
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-windows-vs2019-vulkan-md
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2019-cpu-mt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-windows-vs2019-mt
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2019-gpu-mt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: ncnn-20220729-windows-vs2019-vulkan-mt
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      # 获取指定时区的时间
      # https://github.com/marketplace/actions/get-time-action
      - name: Get Time
        id: time
        uses: JantHsueh/get-time-action@master
        with:
          timeZone: 8

      # 向钉钉发送消息
      # https://github.com/marketplace/actions/web-request-action
      - name: dingtalk
        uses: satak/webrequest-action@master
        with:
          url: ${{ secrets.DINGTALK_WEBHOOK }}
          method: POST
          payload: '{"msgtype": "text", "text": {"content": "版本更新: ${{ github.repository }}-版本号: ${{ github.ref }} \n 编译时间： ${{ steps.time.outputs.time }} \n 距上个正式版的更新记录: \n${{ env.log_state }}"}}'
          headers: '{"Content-Type": "application/json"}'